{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PreviseDx QuantStudio File Utils","text":"<p>Collection of Python modules for processing QuantStudio Excel files.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>import os\nfrom previsedx_quantstudio_file_utils QuantStudioXlsxParser as Parser\nfrom previsedx_quantstudio_file_utils import constants\n\nconfig_file = \"conf/config.yaml\"\nif not os.path.exists(config_file):\n  config_file = constants.DEFAULT_CONFIG_FILE\nconfig = yaml.safe_load(Path(config_file).read_text())\n\nparser = Parser(\n    config=config,\n    config_file=config_file,\n    logfile=logfile,\n    outdir=outdir,\n    outfile=outfile,\n    verbose=constants.verbose,\n)\n\ninfile = \"quantstudio.xls\"\nrecords = parser.get_records(infile)\nfor record in records:\n  print(f\"Quantity mean is '{record.quantitymean}' for sample '{record.samplename}'\")\n</code></pre>"},{"location":"#references","title":"References","text":"<ul> <li>GitHub</li> <li>PYPI</li> </ul>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v010-2024-09-09","title":"v0.1.0 - 2024-09-09","text":"<p>ADDS: - Initial implementation.</p>"},{"location":"INSTALL/","title":"INSTALL","text":""},{"location":"INSTALL/#install-from-pypi","title":"Install from PYPI","text":"<p>Now you can install your package in your Python virtual environment</p> <pre><code>pip install tbd\n</code></pre>"},{"location":"INSTALL/#clone-project","title":"Clone project","text":"<p>You can <code>git clone</code> this project.</p> <pre><code>git clone https://github.com/jai-python3/tbd.git\ncd tbd\n</code></pre>"},{"location":"INSTALL/#local-pip-install","title":"Local pip install","text":"<p>You can optionally establish a Python virtual environment. Then you can run the <code>setup.py</code> script to build to project and then run <code>pip install</code> to install in your local Python virtual environment.</p> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#uninstall","title":"Uninstall","text":"<p>You can uninstall like this:</p> <pre><code>source venv/bin/activate\npip uninstall tbd\nmake clean\n</code></pre>"},{"location":"INSTALL/#developers","title":"Developers","text":"<p>If you modify the code in this package in your local virtual environment:</p> <pre><code>pip uninstall tbd\nmake clean\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#publish-to-pypi","title":"Publish to PYPI","text":"<p>You want can publish the code in this package to the PYPI repository.</p>"},{"location":"INSTALL/#install-twine-and-setuptools","title":"Install twine and setuptools","text":"<p>Install <code>twine</code> and <code>setuptools</code>.</p> <pre><code>pip install twine setuptools\n</code></pre>"},{"location":"INSTALL/#build-the-distribution-package","title":"Build the Distribution Package","text":"<pre><code>python setup.py sdist bdist_wheel\n</code></pre>"},{"location":"INSTALL/#configure-your-pypirc","title":"Configure your ~/.pypirc:","text":"<pre><code>[pypi]\n  username = __token__\n  password = pypi-YOUR-TOKEN\n</code></pre>"},{"location":"INSTALL/#upload-your-package-to-pypi","title":"Upload Your Package to PyPI","text":"<pre><code>twine upload dist/*\n</code></pre>"},{"location":"TODO/","title":"TODO","text":"<ul> <li>unit tests (pytest)</li> </ul>"},{"location":"console_helper/","title":"Console Helper module","text":""},{"location":"constants/","title":"Constants module","text":""},{"location":"file_utils/","title":"File Utils module","text":"<p>A collection of utility functions for file management and data integrity.</p> <p>Functions: - calculate_md5(file_path): Calculate the MD5 hash of a file specified by its path. - check_indir_status(indir=None): Check the status of a directory, providing information on its existence and contents. - check_infile_status(infile, extension=None): Check the status of a file, including its existence and optionally validate its extension. - get_file_creation_date(file_path): Retrieve the creation date of a file specified by its path. - get_file_list(indir=None, extension=None): Get the list of files in the specified directory. - get_file_size(file_path): Get the size of a file specified by its path. - get_line_count(file_path): Get the number of lines in a file specified by its path. - is_binary_file(file_path, block_size=1024): Determine whether a file is binary or text.</p> <p>Use these functions to enhance file handling and data validation in your Python projects.</p>"},{"location":"file_utils/#previsedx_quantstudio_file_utils.file_utils.calculate_md5","title":"<code>calculate_md5(file_path)</code>","text":"<p>Calculate the md5 checksum for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the file for which the md5 checksum will be calculated</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the calculated md5 checksum</p> Source code in <code>previsedx_quantstudio_file_utils/file_utils.py</code> <pre><code>def calculate_md5(file_path: str) -&gt; str:\n    \"\"\"Calculate the md5 checksum for the specified file.\n\n    Args:\n        file_path (str): the file for which the md5 checksum will be calculated\n\n    Returns:\n        str: the calculated md5 checksum\n    \"\"\"\n    md5_hash = hashlib.md5()\n    logging.info(f\"Will attempt to calculate the MD5 checksum for file '{file_path}'\")\n\n    with open(file_path, \"rb\") as file:\n        # Read the file in chunks to efficiently handle large files\n        for chunk in iter(lambda: file.read(4096), b\"\"):\n            md5_hash.update(chunk)\n\n    return md5_hash.hexdigest()\n</code></pre>"},{"location":"file_utils/#previsedx_quantstudio_file_utils.file_utils.check_indir_status","title":"<code>check_indir_status(indir=None)</code>","text":"<p>Check if the directory exists and is a regular directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to be checked</p> <code>None</code> Source code in <code>previsedx_quantstudio_file_utils/file_utils.py</code> <pre><code>def check_indir_status(indir: str = None) -&gt; None:\n    \"\"\"Check if the directory exists and is a regular directory.\n\n    Args:\n        indir (str): the directory to be checked\n    \"\"\"\n    error_ctr = 0\n\n    if indir is None or indir == '':\n        error_console.print(f\"'{indir}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(indir):\n            error_ctr += 1\n            error_console.print(f\"directory '{indir}' does not exist\")\n        else:\n            if not os.path.isdir(indir):\n                error_ctr += 1\n                error_console.print(f\"'{indir}' is not a regular directory\")\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input directory '{indir}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#previsedx_quantstudio_file_utils.file_utils.check_infile_status","title":"<code>check_infile_status(infile, extension=None)</code>","text":"<p>Check if the file exists, if it is a regular file and whether it has content.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>the file to be checked</p> required Source code in <code>previsedx_quantstudio_file_utils/file_utils.py</code> <pre><code>def check_infile_status(infile: str, extension: Optional[str] = None) -&gt; None:\n    \"\"\"Check if the file exists, if it is a regular file and whether it has\n    content.\n\n    Args:\n        infile (str): the file to be checked\n\n    Raises:\n        None\n    \"\"\"\n\n    error_ctr = 0\n\n    if infile is None or infile == \"\":\n        error_console.print(f\"'{infile}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(infile):\n            error_ctr += 1\n            error_console.print(f\"'{infile}' does not exist\")\n        else:\n            if not os.path.isfile(infile):\n                error_ctr += 1\n                error_console.print(f\"'{infile}' is not a regular file\")\n            if os.stat(infile).st_size == 0:\n                error_console.print(f\"'{infile}' has no content\")\n                error_ctr += 1\n            if extension is not None and not infile.endswith(extension):\n                error_console.print(\n                    f\"'{infile}' does not have filename extension '{extension}'\"\n                )\n                error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input file '{infile}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#previsedx_quantstudio_file_utils.file_utils.get_file_creation_date","title":"<code>get_file_creation_date(file_path)</code>","text":"<p>Determine the creation date for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the absolute path of the file</p> required <p>Returns:</p> Name Type Description <code>datetime</code> <code>datetime</code> <p>the date the file was created according to the operating system</p> Source code in <code>previsedx_quantstudio_file_utils/file_utils.py</code> <pre><code>def get_file_creation_date(file_path: str) -&gt; datetime:\n    \"\"\"Determine the creation date for the specified file.\n\n    Args:\n        file_path (str): the absolute path of the file\n\n    Returns:\n        datetime: the date the file was created according to the operating system\n    \"\"\"\n    if platform.system() == \"Windows\":\n        # On Windows, use creation time\n        creation_time = os.path.getctime(file_path)\n    else:\n        # On Unix-based systems, use birth time (creation time)\n        # Note: Not all file systems support birth time, and it might not be available on some systems.\n        stat_info = os.stat(file_path)\n        creation_time = stat_info.st_mtime\n\n    # Convert the timestamp to a readable date\n    creation_date = datetime.fromtimestamp(creation_time)\n\n    return creation_date\n</code></pre>"},{"location":"file_utils/#previsedx_quantstudio_file_utils.file_utils.get_file_list","title":"<code>get_file_list(indir=None, extension=None)</code>","text":"<p>Get the list of files in the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to search for files</p> <code>None</code> <code>extension</code> <code>str</code> <p>the file extension to filter on</p> <code>None</code> <p>Returns:</p> Name Type Description <code>file_list</code> <code>List[str]</code> <p>the list of files found in the directory</p> Source code in <code>previsedx_quantstudio_file_utils/file_utils.py</code> <pre><code>def get_file_list(indir: str = None, extension: str = None) -&gt; List[str]:\n    \"\"\"Get the list of files in the specified directory.\n\n    Args:\n        indir (str): the directory to search for files\n        extension (str): the file extension to filter on\n\n    Returns:\n        file_list (List[str]): the list of files found in the directory\n    \"\"\"\n    if extension is None:\n        logging.info(f\"Going to search for files in directory '{indir}'\")\n    else:\n        logging.info(f\"Going to search for files with extension '{extension}' in directory '{indir}'\")\n\n    file_list = []\n\n    for dirpath, dirnames, filenames in os.walk(indir):\n\n        if 'venv' in dirpath:\n            logging.info(f\"Going to ignore files in directory '{dirpath}'\")\n            continue\n        for name in filenames:\n            filepath = os.path.normpath(os.path.join(dirpath, name))\n            if os.path.isfile(filepath):\n                if extension is not None:\n                    if filepath.endswith(f'.{extension}'):\n                        file_list.append(filepath)\n                else:\n                    file_list.append(filepath)\n\n    return file_list\n</code></pre>"},{"location":"parser/","title":"Parser module","text":"<p>Class for parsing Thermo Fisher Scientific QuantStudio qPCR Result Excel files.</p>"},{"location":"parser/#previsedx_quantstudio_file_utils.parser.Parser","title":"<code>Parser</code>","text":"<p>Class for parsing Thermo Fisher Scientific QuantStudio qPCR Result Excel files.</p> Source code in <code>previsedx_quantstudio_file_utils/parser.py</code> <pre><code>class Parser:\n    \"\"\"Class for parsing Thermo Fisher Scientific QuantStudio qPCR Result Excel\n    files.\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Constructor for Parser.\"\"\"\n        self.config = kwargs.get(\"config\", None)\n        self.config_file = kwargs.get(\"config_file\", None)\n        self.logfile = kwargs.get(\"logfile\", None)\n        self.outdir = kwargs.get(\"outdir\", None)\n        self.verbose = kwargs.get(\"verbose\", constants.DEFAULT_VERBOSE)\n\n        self.is_parsed = False\n        self.rec_ctr = 0\n        self.rec_list = []\n\n        self.error_ctr = 0\n        self.error_list = []\n\n        logging.info(f\"Instantiated Parser in file '{os.path.abspath(__file__)}'\")\n\n    def _write_validation_report(self, infile: str) -&gt; None:\n        \"\"\"Write the validation report file.\n\n        Args:\n            infile (str): The input QuantStudio qPCR Results file that was parsed.\n        \"\"\"\n        logging.info(f\"Will attempt to generate validation report for file '{infile}'\")\n\n        basename = os.path.basename(infile)\n\n        outfile = os.path.join(self.outdir, f\"{basename}.validation-report.txt\")\n\n        with open(outfile, \"w\") as of:\n            of.write(f\"## method-created: {os.path.abspath(__file__)}\\n\")\n            of.write(\n                f\"## date-created: {str(datetime.today().strftime('%Y-%m-%d-%H%M%S'))}\\n\"\n            )\n            of.write(f\"## created-by: {os.environ.get('USER')}\\n\")\n            of.write(f\"## infile: {infile}\\n\")\n            of.write(f\"## logfile: {self.logfile}\\n\")\n\n            if self.error_ctr &gt; 0:\n                of.write(\n                    f\"Encountered the following '{self.error_ctr}' validation errors:\\n\"\n                )\n                for error in self.error_list:\n                    of.write(f\"{error}\\n\")\n\n        logging.info(f\"Wrote file validation report file '{outfile}'\")\n        if self.verbose:\n            print(f\"Wrote file validation report file '{outfile}'\")\n</code></pre>"},{"location":"parser/#previsedx_quantstudio_file_utils.parser.Parser.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Constructor for Parser.</p> Source code in <code>previsedx_quantstudio_file_utils/parser.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Constructor for Parser.\"\"\"\n    self.config = kwargs.get(\"config\", None)\n    self.config_file = kwargs.get(\"config_file\", None)\n    self.logfile = kwargs.get(\"logfile\", None)\n    self.outdir = kwargs.get(\"outdir\", None)\n    self.verbose = kwargs.get(\"verbose\", constants.DEFAULT_VERBOSE)\n\n    self.is_parsed = False\n    self.rec_ctr = 0\n    self.rec_list = []\n\n    self.error_ctr = 0\n    self.error_list = []\n\n    logging.info(f\"Instantiated Parser in file '{os.path.abspath(__file__)}'\")\n</code></pre>"},{"location":"record/","title":"Record module","text":""},{"location":"record/#previsedx_quantstudio_file_utils.record.AmpStatusEnum","title":"<code>AmpStatusEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this AmpStatusEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class AmpStatusEnum(Enum):\n    \"\"\"TODO: Insert docstring for this AmpStatusEnum class.\"\"\"\n\n    NOAMP = \"No Amp\"\n    AMP = \"Amp\"\n    INCONCLUSIVE = \"Inconclusive\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.AutomaticBaselineEnum","title":"<code>AutomaticBaselineEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this AutomaticBaselineEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class AutomaticBaselineEnum(Enum):\n    \"\"\"TODO: Insert docstring for this AutomaticBaselineEnum class.\"\"\"\n\n    TRUE = \"true\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.AutomaticCtThresholdEnum","title":"<code>AutomaticCtThresholdEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this AutomaticCtThresholdEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class AutomaticCtThresholdEnum(Enum):\n    \"\"\"TODO: Insert docstring for this AutomaticCtThresholdEnum class.\"\"\"\n\n    FALSE = \"false\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.BaselineEndEnum","title":"<code>BaselineEndEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this BaselineEndEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class BaselineEndEnum(Enum):\n    \"\"\"TODO: Insert docstring for this BaselineEndEnum class.\"\"\"\n\n    BASELINEEND_40 = \"40\"\n    BASELINEEND_33 = \"33\"\n    BASELINEEND_24 = \"24\"\n    BASELINEEND_23 = \"23\"\n    BASELINEEND_31 = \"31\"\n    BASELINEEND_20 = \"20\"\n    BASELINEEND_34 = \"34\"\n    BASELINEEND_30 = \"30\"\n    BASELINEEND_29 = \"29\"\n    BASELINEEND_25 = \"25\"\n    BASELINEEND_26 = \"26\"\n    BASELINEEND_27 = \"27\"\n    BASELINEEND_28 = \"28\"\n    BASELINEEND_35 = \"35\"\n    BASELINEEND_32 = \"32\"\n    BASELINEEND_36 = \"36\"\n    BASELINEEND_22 = \"22\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.BaselineStartEnum","title":"<code>BaselineStartEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this BaselineStartEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class BaselineStartEnum(Enum):\n    \"\"\"TODO: Insert docstring for this BaselineStartEnum class.\"\"\"\n\n    BASELINESTART_3 = \"3\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.CommentsEnum","title":"<code>CommentsEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this CommentsEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class CommentsEnum(Enum):\n    \"\"\"TODO: Insert docstring for this CommentsEnum class.\"\"\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.CqConfEnum","title":"<code>CqConfEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this CqConfEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class CqConfEnum(Enum):\n    \"\"\"TODO: Insert docstring for this CqConfEnum class.\"\"\"\n\n    CQCONF_Y = \"Y\"\n    CQCONF_N = \"N\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.CtThresholdEnum","title":"<code>CtThresholdEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this CtThresholdEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class CtThresholdEnum(Enum):\n    \"\"\"TODO: Insert docstring for this CtThresholdEnum class.\"\"\"\n\n    CTTHRESHOLD_0_100 = \"0.100\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.EfficiencyEnum","title":"<code>EfficiencyEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this EfficiencyEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class EfficiencyEnum(Enum):\n    \"\"\"TODO: Insert docstring for this EfficiencyEnum class.\"\"\"\n\n    EFFICIENCY_89_154 = \"89.154\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.ExpfailEnum","title":"<code>ExpfailEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this ExpfailEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class ExpfailEnum(Enum):\n    \"\"\"TODO: Insert docstring for this ExpfailEnum class.\"\"\"\n\n    EXPFAIL_Y = \"Y\"\n    EXPFAIL_N = \"N\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.HighsdEnum","title":"<code>HighsdEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this HighsdEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class HighsdEnum(Enum):\n    \"\"\"TODO: Insert docstring for this HighsdEnum class.\"\"\"\n\n    HIGHSD_N = \"N\"\n    HIGHSD_Y = \"Y\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidAmpStatusError","title":"<code>InvalidAmpStatusError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidAmpStatusError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidAmpStatusError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidAmpStatusError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidAmpStatusError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidAmpStatusError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidAmpStatusError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidAmpStatusError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidAutomaticBaselineError","title":"<code>InvalidAutomaticBaselineError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidAutomaticBaselineError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidAutomaticBaselineError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidAutomaticBaselineError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidAutomaticBaselineError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidAutomaticBaselineError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidAutomaticBaselineError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidAutomaticBaselineError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidAutomaticCtThresholdError","title":"<code>InvalidAutomaticCtThresholdError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidAutomaticCtThresholdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidAutomaticCtThresholdError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidAutomaticCtThresholdError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidAutomaticCtThresholdError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidAutomaticCtThresholdError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidAutomaticCtThresholdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidAutomaticCtThresholdError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidBaselineEndError","title":"<code>InvalidBaselineEndError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidBaselineEndError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidBaselineEndError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidBaselineEndError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidBaselineEndError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidBaselineEndError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidBaselineEndError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidBaselineEndError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidBaselineStartError","title":"<code>InvalidBaselineStartError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidBaselineStartError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidBaselineStartError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidBaselineStartError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidBaselineStartError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidBaselineStartError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidBaselineStartError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidBaselineStartError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCommentsError","title":"<code>InvalidCommentsError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidCommentsError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidCommentsError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidCommentsError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidCommentsError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCommentsError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidCommentsError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidCommentsError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCqConfError","title":"<code>InvalidCqConfError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidCqConfError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidCqConfError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidCqConfError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidCqConfError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCqConfError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidCqConfError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidCqConfError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtError","title":"<code>InvalidCtError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidCtError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidCtError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidCtError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidCtError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidCtError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidCtError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtMeanError","title":"<code>InvalidCtMeanError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidCtMeanError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidCtMeanError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidCtMeanError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidCtMeanError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtMeanError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidCtMeanError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidCtMeanError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtSdError","title":"<code>InvalidCtSdError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidCtSdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidCtSdError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidCtSdError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidCtSdError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtSdError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidCtSdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidCtSdError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtThresholdError","title":"<code>InvalidCtThresholdError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidCtThresholdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidCtThresholdError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidCtThresholdError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidCtThresholdError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidCtThresholdError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidCtThresholdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidCtThresholdError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidEfficiencyError","title":"<code>InvalidEfficiencyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidEfficiencyError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidEfficiencyError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidEfficiencyError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidEfficiencyError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidEfficiencyError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidEfficiencyError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidEfficiencyError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidExpfailError","title":"<code>InvalidExpfailError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidExpfailError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidExpfailError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidExpfailError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidExpfailError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidExpfailError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidExpfailError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidExpfailError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidHighsdError","title":"<code>InvalidHighsdError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidHighsdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidHighsdError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidHighsdError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidHighsdError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidHighsdError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidHighsdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidHighsdError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidNoampError","title":"<code>InvalidNoampError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidNoampError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidNoampError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidNoampError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidNoampError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidNoampError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidNoampError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidNoampError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidOmitError","title":"<code>InvalidOmitError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidOmitError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidOmitError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidOmitError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidOmitError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidOmitError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidOmitError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidOmitError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuantityError","title":"<code>InvalidQuantityError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidQuantityError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidQuantityError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidQuantityError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidQuantityError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuantityError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidQuantityError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidQuantityError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuantityMeanError","title":"<code>InvalidQuantityMeanError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidQuantityMeanError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidQuantityMeanError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidQuantityMeanError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidQuantityMeanError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuantityMeanError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidQuantityMeanError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidQuantityMeanError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuantitySdError","title":"<code>InvalidQuantitySdError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidQuantitySdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidQuantitySdError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidQuantitySdError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidQuantitySdError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuantitySdError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidQuantitySdError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidQuantitySdError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuencherError","title":"<code>InvalidQuencherError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidQuencherError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidQuencherError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidQuencherError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidQuencherError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidQuencherError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidQuencherError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidQuencherError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidRSuperscript2Error","title":"<code>InvalidRSuperscript2Error</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidRSuperscript2Error class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidRSuperscript2Error(Exception):\n    \"\"\"TODO: insert docstring for this InvalidRSuperscript2Error class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidRSuperscript2Error class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidRSuperscript2Error.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidRSuperscript2Error class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidRSuperscript2Error class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidReporterError","title":"<code>InvalidReporterError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidReporterError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidReporterError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidReporterError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidReporterError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidReporterError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidReporterError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidReporterError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidSampleNameError","title":"<code>InvalidSampleNameError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidSampleNameError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidSampleNameError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidSampleNameError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidSampleNameError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidSampleNameError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidSampleNameError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidSampleNameError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidSlopeError","title":"<code>InvalidSlopeError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidSlopeError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidSlopeError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidSlopeError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidSlopeError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidSlopeError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidSlopeError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidSlopeError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidTargetNameError","title":"<code>InvalidTargetNameError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidTargetNameError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidTargetNameError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidTargetNameError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidTargetNameError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidTargetNameError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidTargetNameError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidTargetNameError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidTaskError","title":"<code>InvalidTaskError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidTaskError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidTaskError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidTaskError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidTaskError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidTaskError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidTaskError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidTaskError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidWellError","title":"<code>InvalidWellError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidWellError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidWellError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidWellError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidWellError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidWellError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidWellError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidWellError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidWellPositionError","title":"<code>InvalidWellPositionError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidWellPositionError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidWellPositionError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidWellPositionError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidWellPositionError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidWellPositionError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidWellPositionError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidWellPositionError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidYinterceptError","title":"<code>InvalidYinterceptError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>TODO: insert docstring for this InvalidYinterceptError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class InvalidYinterceptError(Exception):\n    \"\"\"TODO: insert docstring for this InvalidYinterceptError class.\"\"\"\n\n    def __init__(self, value: str, message: str) -&gt; None:\n        \"\"\"Class constructor for InvalidYinterceptError class.\"\"\"\n        self.value = value\n        self.message = message\n        super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.InvalidYinterceptError.__init__","title":"<code>__init__(value, message)</code>","text":"<p>Class constructor for InvalidYinterceptError class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>def __init__(self, value: str, message: str) -&gt; None:\n    \"\"\"Class constructor for InvalidYinterceptError class.\"\"\"\n    self.value = value\n    self.message = message\n    super().__init__(message)\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.NoampEnum","title":"<code>NoampEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this NoampEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class NoampEnum(Enum):\n    \"\"\"TODO: Insert docstring for this NoampEnum class.\"\"\"\n\n    NOAMP_Y = \"Y\"\n    NOAMP_N = \"N\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.OmitEnum","title":"<code>OmitEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this OmitEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class OmitEnum(Enum):\n    \"\"\"TODO: Insert docstring for this OmitEnum class.\"\"\"\n\n    FALSE = \"false\"\n    TRUE = \"true\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.QuantityMeanEnum","title":"<code>QuantityMeanEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this QuantityMeanEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class QuantityMeanEnum(Enum):\n    \"\"\"TODO: Insert docstring for this QuantityMeanEnum class.\"\"\"\n\n    QUANTITYMEAN_0_000 = \"0.000\"\n    QUANTITYMEAN_0_128 = \"0.128\"\n    QUANTITYMEAN_0_179 = \"0.179\"\n    QUANTITYMEAN_0_002 = \"0.002\"\n    QUANTITYMEAN_0_141 = \"0.141\"\n    QUANTITYMEAN_0_159 = \"0.159\"\n    QUANTITYMEAN_0_005 = \"0.005\"\n    QUANTITYMEAN_0_123 = \"0.123\"\n    QUANTITYMEAN_0_166 = \"0.166\"\n    QUANTITYMEAN_0_003 = \"0.003\"\n    QUANTITYMEAN_0_001 = \"0.001\"\n    QUANTITYMEAN_0_244 = \"0.244\"\n    QUANTITYMEAN_0_418 = \"0.418\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.QuantitySdEnum","title":"<code>QuantitySdEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this QuantitySdEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class QuantitySdEnum(Enum):\n    \"\"\"TODO: Insert docstring for this QuantitySdEnum class.\"\"\"\n\n    QUANTITYSD_0_005 = \"0.005\"\n    QUANTITYSD_0_004 = \"0.004\"\n    QUANTITYSD_0_000 = \"0.000\"\n    QUANTITYSD_0_006 = \"0.006\"\n    QUANTITYSD_0_001 = \"0.001\"\n    QUANTITYSD_0_017 = \"0.017\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.QuencherEnum","title":"<code>QuencherEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this QuencherEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class QuencherEnum(Enum):\n    \"\"\"TODO: Insert docstring for this QuencherEnum class.\"\"\"\n\n    NFQMGB = \"NFQ-MGB\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.RSuperscript2Enum","title":"<code>RSuperscript2Enum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this RSuperscript2Enum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class RSuperscript2Enum(Enum):\n    \"\"\"TODO: Insert docstring for this RSuperscript2Enum class.\"\"\"\n\n    RSUPERSCRIPT2_0_978 = \"0.978\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record","title":"<code>Record</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class for encapsulating the rows in SampleRun files.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class Record(BaseModel):\n    \"\"\"Class for encapsulating the rows in SampleRun files.\"\"\"\n\n    well: int = Field(\n        ...,  # Indicates this is a required field\n        example=[\"1\", \"2\", \"3\", \"4\"],\n        description=\"TBD\",\n        frozen=True,\n        ge=1,\n        le=96,\n        alias=\"Well\",\n    )\n\n    wellposition: str = Field(\n        ...,  # Indicates this is a required field\n        example=[\"A1\", \"A2\", \"A3\", \"A4\"],\n        description=\"TBD\",\n        frozen=True,\n        # min_length=2,\n        # max_length=2,\n        alias=\"Well Position\",\n    )\n\n    samplename: Optional[str] = Field(\n        # ...,  # Indicates this is a required field\n        example=[\"624\", \"FLO1 3/14 - REP 1\", \"POS - REP 1\", \"3% - REP 3\"],\n        description=\"TBD\",\n        frozen=True,\n        min_length=3,\n        max_length=20,\n        alias=\"Sample Name\",\n    )\n\n    targetname: Optional[str] = Field(\n        None,  # Indicates this is a required field\n        example=[\"FBN1\"],\n        description=\"This is the target name.\",\n        frozen=True,\n        min_length=3,\n        max_length=5,\n        alias=\"Target Name\",\n    )\n\n    quantity: Optional[float] = Field(\n        default=0.0,  # Sets default value\n        example=[\"0.000\", \"0.133\", \"0.127\", \"0.123\"],\n        description=\"The quantity.\",\n        alias=\"Quantity\",\n    )\n\n    # TODO: A value is required when the Task is UNKNOWN\n    quantitymean: Optional[float] = Field(\n        # ...,  # Indicates this is a required field\n        None,\n        example=[\"0.000\", \"0.128\", \"0.179\", \"0.002\"],\n        description=\"TBD\",\n        frozen=True,\n        alias=\"Quantity Mean\",\n    )\n\n    # TODO: A value is required when the Task is UNKNOWN\n    quantitysd: Optional[float] = Field(\n        # ...,  # Indicates this is a required field\n        None,\n        example=[\"0.005\", \"0.004\", \"0.000\", \"0.006\"],\n        description=\"TBD\",\n        frozen=True,\n        alias=\"Quantity SD\",\n    )\n\n    yintercept: float = Field(\n        ...,  # Indicates this is a required field\n        example=[\"24.508\"],\n        description=\"TBD\",\n        frozen=True,\n        alias=\"Y-Intercept\",\n    )\n\n    rsuperscript2: float = Field(\n        ...,  # Indicates this is a required field\n        example=[\"0.978\"],\n        description=\"TBD\",\n        frozen=True,\n        # ge=0.978,\n        # le=0.978,\n        alias=\"R(superscript 2)\",\n    )\n\n    slope: float = Field(\n        ...,  # Indicates this is a required field\n        example=[\"-3.612\"],\n        description=\"TBD\",\n        frozen=True,\n        alias=\"Slope\",\n    )\n\n    efficiency: Optional[float] = Field(\n        None,  # Indicates this is a required field\n        example=[\"89.154\"],\n        description=\"TBD\",\n        frozen=True,\n        alias=\"Efficiency\",\n    )\n\n    ampstatus: str = Field(\n        # ampstatus: AmpStatusEnum = Field(\n        # ...,  # Indicates this is a required field\n        example=[\"No Amp\", \"Amp\", \"Inconclusive\"],\n        description=\"The amplification status.\",\n        frozen=True,\n        alias=\"Amp Status\",\n    )\n\n    nmv: Optional[float] = Field(\n        None,\n        description=\"The normalized methylation value.\",\n        frozen=True,\n    )\n\n    @pydantic.root_validator(pre=True)\n    def is_record_valid(cls, values) -&gt; None:\n        # #logging.info(f\"In root validator with values '{values}'\")\n        # TODO: need to implement the root validator\n        # raise InvalidRecordError(message=\"\")\n        return values\n\n    @pydantic.validator(\"well\")\n    # @classmethod\n    def is_well_valid(cls, value):\n        \"\"\"Validate value for Well column (column number 1).\"\"\"\n        # #logging.info(f\"In well validator with value '{value}'\")\n        if value:\n            # TODO: implement validation here\n            return value\n        else:\n            raise InvalidWellError(\n                value=value, message=\"Well (in column number 1) should ...  TODO\"\n            )\n\n    @pydantic.validator(\"wellposition\")\n    # @classmethod\n    def is_wellposition_valid(cls, value):\n        \"\"\"Validate value for Well Position column (column number 2).\"\"\"\n        # #logging.info(f\"In wellposition validator with value '{value}'\")\n        if value:\n            # TODO: implement validation here\n            return value\n        else:\n            raise InvalidWellPositionError(\n                value=value,\n                message=\"Well Position (in column number 2) should ...  TODO\",\n            )\n\n    @pydantic.validator(\n        \"samplename\",\n        always=True,\n    )\n    # @classmethod\n    def is_samplename_valid(cls, value: Optional[str], values: Dict[str, Any]):\n        \"\"\"Validate value for Sample Name column (column number 4).\"\"\"\n        # #logging.info(f\"In samplename validator with value '{value}' and values '{values}'\")\n        if value is None or value == \"\":\n            if \"ct\" not in values:\n                logging.warning(\"ct not in values\")\n                return None\n\n            if values[\"ct\"] == \"Undetermined\":\n                return value\n            else:\n                raise InvalidSampleNameError(\n                    value=value,\n                    message=\"Sample Name (in column number 4) should defined\",\n                )\n\n        return value\n\n    @pydantic.validator(\"quantity\")\n    # @classmethod\n    def is_quantity_valid(cls, value: float, values):\n        \"\"\"Validate value for Quantity column (column number 12).\"\"\"\n        # logging.info(f\"In quantity validator with value '{value}'\")\n        if value is None or value == \"\":\n            return None\n        if value == 0 or value == 0.0 or value:\n            # TODO: implement validation here\n            return value\n        else:\n            print(f\"{value=}\")\n            sys.exit(1)\n            raise InvalidQuantityError(\n                value=value,\n                message=f\"JS1 Encountered invalid quantity (in column number 12) with sample name '{values['samplename']}'\",\n            )\n\n    # @classmethod\n    @pydantic.validator(\"quantitymean\", always=True, check_fields=True)\n    def is_quantitymean_valid(cls, value, values):\n        \"\"\"Validate value for Quantity Mean column (column number 13).\"\"\"\n        # logging.info(f\"In quantitymean validator with value '{value}'\")\n        # logging.info(f\"samplename: {values['samplename']}\")\n        # logging.info(f\"values: {values}\")\n\n        if value is None or value == \"\":\n            return None\n            # if \"samplename\" not in values:\n        #         logging.warning(f\"samplename is not defined while checking Quantity Mean (in column number 13)\")\n        #         return None\n        #         # raise Exception(\"samplename is not defined\")\n        #     if values[\"samplename\"] in (\"STD 1\", \"STD 2\", \"STD 3\", \"STD 4\", \"STD 5\"):\n        #         logging.info(f\"samplename is '{values['samplename']}' while checking Quantity Mean (in column number 13)\")\n        #         return None\n        #     else:\n        #         raise InvalidQuantityMeanError(value=value, message=f\"Quantity Mean (in column number 13) should defined\")\n        return value\n\n    @pydantic.validator(\"yintercept\")\n    # @classmethod\n    def is_yintercept_valid(cls, value):\n        \"\"\"Validate value for Y-Intercept column (column number 15).\"\"\"\n        # logging.info(f\"In yintercept validator with value '{value}'\")\n        if value:\n            # TODO: implement validation here\n            return value\n        elif value == 24.508:\n            return value\n        else:\n            raise InvalidYinterceptError(\n                value=value,\n                message=\"Y-Intercept (in column number 15) should ...  TODO\",\n            )\n\n    @pydantic.validator(\"rsuperscript2\")\n    # @classmethod\n    def is_rsuperscript2_valid(cls, value):\n        \"\"\"Validate value for R(superscript 2) column (column number 16).\"\"\"\n        # logging.info(f\"In rsuperscript2 validator with value '{value}'\")\n        if value:\n            # TODO: implement validation here\n            return value\n        elif value == 0.978:\n            return value\n        else:\n            raise InvalidRSuperscript2Error(\n                value=value,\n                message=\"R(superscript 2) (in column number 16) should ...  TODO\",\n            )\n\n    @pydantic.validator(\"slope\")\n    # @classmethod\n    def is_slope_valid(cls, value):\n        \"\"\"Validate value for Slope column (column number 17).\"\"\"\n        # logging.info(f\"In slope validator with value '{value}'\")\n        if value:\n            # TODO: implement validation here\n            return value\n        elif value == -3.612:\n            return value\n        else:\n            raise InvalidSlopeError(\n                value=value, message=\"Slope (in column number 17) should ...  TODO\"\n            )\n\n    @pydantic.validator(\"efficiency\")\n    # @classmethod\n    def is_efficiency_valid(cls, value):\n        \"\"\"Validate value for Efficiency column (column number 18).\"\"\"\n        # logging.info(f\"In efficiency validator with value '{value}'\")\n        if value:\n            # TODO: implement validation here\n            return value\n        elif value == 89.154:\n            return value\n        else:\n            raise InvalidEfficiencyError(\n                value=value,\n                message=\"Efficiency (in column number 18) should ...  TODO\",\n            )\n\n    @pydantic.validator(\"ampstatus\")\n    # @classmethod\n    def is_ampstatus_valid(cls, value):\n        \"\"\"Validate value for Amp Status column (column number 24).\"\"\"\n        # logging.info(f\"In ampstatus validator with value '{value}'\")\n        if value:\n            # TODO: implement validation here\n            return value\n        elif value == \"No Amp\":\n            return value\n        elif value == \"Amp\":\n            return value\n        elif value == \"Inconclusive\":\n            return value\n        else:\n            raise InvalidAmpStatusError(\n                value=value,\n                message=\"Amp Status (in column number 24) should ...  TODO\",\n            )\n\n    @validator(\"quantity\", pre=True, always=True)\n    def convert_quantity_empty_str_to_none(cls, v):\n        return None if v == \"\" else v\n\n    @validator(\"quantitymean\", pre=True, always=True)\n    def convert_quantitymean_empty_str_to_none(cls, v):\n        return None if v == \"\" else v\n\n    @validator(\"quantitysd\", pre=True, always=True)\n    def convert_quantitysd_empty_str_to_none(cls, v):\n        return None if v == \"\" else v\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_ampstatus_valid","title":"<code>is_ampstatus_valid(value)</code>","text":"<p>Validate value for Amp Status column (column number 24).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"ampstatus\")\n# @classmethod\ndef is_ampstatus_valid(cls, value):\n    \"\"\"Validate value for Amp Status column (column number 24).\"\"\"\n    # logging.info(f\"In ampstatus validator with value '{value}'\")\n    if value:\n        # TODO: implement validation here\n        return value\n    elif value == \"No Amp\":\n        return value\n    elif value == \"Amp\":\n        return value\n    elif value == \"Inconclusive\":\n        return value\n    else:\n        raise InvalidAmpStatusError(\n            value=value,\n            message=\"Amp Status (in column number 24) should ...  TODO\",\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_efficiency_valid","title":"<code>is_efficiency_valid(value)</code>","text":"<p>Validate value for Efficiency column (column number 18).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"efficiency\")\n# @classmethod\ndef is_efficiency_valid(cls, value):\n    \"\"\"Validate value for Efficiency column (column number 18).\"\"\"\n    # logging.info(f\"In efficiency validator with value '{value}'\")\n    if value:\n        # TODO: implement validation here\n        return value\n    elif value == 89.154:\n        return value\n    else:\n        raise InvalidEfficiencyError(\n            value=value,\n            message=\"Efficiency (in column number 18) should ...  TODO\",\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_quantity_valid","title":"<code>is_quantity_valid(value, values)</code>","text":"<p>Validate value for Quantity column (column number 12).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"quantity\")\n# @classmethod\ndef is_quantity_valid(cls, value: float, values):\n    \"\"\"Validate value for Quantity column (column number 12).\"\"\"\n    # logging.info(f\"In quantity validator with value '{value}'\")\n    if value is None or value == \"\":\n        return None\n    if value == 0 or value == 0.0 or value:\n        # TODO: implement validation here\n        return value\n    else:\n        print(f\"{value=}\")\n        sys.exit(1)\n        raise InvalidQuantityError(\n            value=value,\n            message=f\"JS1 Encountered invalid quantity (in column number 12) with sample name '{values['samplename']}'\",\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_quantitymean_valid","title":"<code>is_quantitymean_valid(value, values)</code>","text":"<p>Validate value for Quantity Mean column (column number 13).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"quantitymean\", always=True, check_fields=True)\ndef is_quantitymean_valid(cls, value, values):\n    \"\"\"Validate value for Quantity Mean column (column number 13).\"\"\"\n    # logging.info(f\"In quantitymean validator with value '{value}'\")\n    # logging.info(f\"samplename: {values['samplename']}\")\n    # logging.info(f\"values: {values}\")\n\n    if value is None or value == \"\":\n        return None\n        # if \"samplename\" not in values:\n    #         logging.warning(f\"samplename is not defined while checking Quantity Mean (in column number 13)\")\n    #         return None\n    #         # raise Exception(\"samplename is not defined\")\n    #     if values[\"samplename\"] in (\"STD 1\", \"STD 2\", \"STD 3\", \"STD 4\", \"STD 5\"):\n    #         logging.info(f\"samplename is '{values['samplename']}' while checking Quantity Mean (in column number 13)\")\n    #         return None\n    #     else:\n    #         raise InvalidQuantityMeanError(value=value, message=f\"Quantity Mean (in column number 13) should defined\")\n    return value\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_rsuperscript2_valid","title":"<code>is_rsuperscript2_valid(value)</code>","text":"<p>Validate value for R(superscript 2) column (column number 16).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"rsuperscript2\")\n# @classmethod\ndef is_rsuperscript2_valid(cls, value):\n    \"\"\"Validate value for R(superscript 2) column (column number 16).\"\"\"\n    # logging.info(f\"In rsuperscript2 validator with value '{value}'\")\n    if value:\n        # TODO: implement validation here\n        return value\n    elif value == 0.978:\n        return value\n    else:\n        raise InvalidRSuperscript2Error(\n            value=value,\n            message=\"R(superscript 2) (in column number 16) should ...  TODO\",\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_samplename_valid","title":"<code>is_samplename_valid(value, values)</code>","text":"<p>Validate value for Sample Name column (column number 4).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\n    \"samplename\",\n    always=True,\n)\n# @classmethod\ndef is_samplename_valid(cls, value: Optional[str], values: Dict[str, Any]):\n    \"\"\"Validate value for Sample Name column (column number 4).\"\"\"\n    # #logging.info(f\"In samplename validator with value '{value}' and values '{values}'\")\n    if value is None or value == \"\":\n        if \"ct\" not in values:\n            logging.warning(\"ct not in values\")\n            return None\n\n        if values[\"ct\"] == \"Undetermined\":\n            return value\n        else:\n            raise InvalidSampleNameError(\n                value=value,\n                message=\"Sample Name (in column number 4) should defined\",\n            )\n\n    return value\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_slope_valid","title":"<code>is_slope_valid(value)</code>","text":"<p>Validate value for Slope column (column number 17).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"slope\")\n# @classmethod\ndef is_slope_valid(cls, value):\n    \"\"\"Validate value for Slope column (column number 17).\"\"\"\n    # logging.info(f\"In slope validator with value '{value}'\")\n    if value:\n        # TODO: implement validation here\n        return value\n    elif value == -3.612:\n        return value\n    else:\n        raise InvalidSlopeError(\n            value=value, message=\"Slope (in column number 17) should ...  TODO\"\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_well_valid","title":"<code>is_well_valid(value)</code>","text":"<p>Validate value for Well column (column number 1).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"well\")\n# @classmethod\ndef is_well_valid(cls, value):\n    \"\"\"Validate value for Well column (column number 1).\"\"\"\n    # #logging.info(f\"In well validator with value '{value}'\")\n    if value:\n        # TODO: implement validation here\n        return value\n    else:\n        raise InvalidWellError(\n            value=value, message=\"Well (in column number 1) should ...  TODO\"\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_wellposition_valid","title":"<code>is_wellposition_valid(value)</code>","text":"<p>Validate value for Well Position column (column number 2).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"wellposition\")\n# @classmethod\ndef is_wellposition_valid(cls, value):\n    \"\"\"Validate value for Well Position column (column number 2).\"\"\"\n    # #logging.info(f\"In wellposition validator with value '{value}'\")\n    if value:\n        # TODO: implement validation here\n        return value\n    else:\n        raise InvalidWellPositionError(\n            value=value,\n            message=\"Well Position (in column number 2) should ...  TODO\",\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.Record.is_yintercept_valid","title":"<code>is_yintercept_valid(value)</code>","text":"<p>Validate value for Y-Intercept column (column number 15).</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>@pydantic.validator(\"yintercept\")\n# @classmethod\ndef is_yintercept_valid(cls, value):\n    \"\"\"Validate value for Y-Intercept column (column number 15).\"\"\"\n    # logging.info(f\"In yintercept validator with value '{value}'\")\n    if value:\n        # TODO: implement validation here\n        return value\n    elif value == 24.508:\n        return value\n    else:\n        raise InvalidYinterceptError(\n            value=value,\n            message=\"Y-Intercept (in column number 15) should ...  TODO\",\n        )\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.ReporterEnum","title":"<code>ReporterEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this ReporterEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class ReporterEnum(Enum):\n    \"\"\"TODO: Insert docstring for this ReporterEnum class.\"\"\"\n\n    FAM = \"FAM\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.SlopeEnum","title":"<code>SlopeEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this SlopeEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class SlopeEnum(Enum):\n    \"\"\"TODO: Insert docstring for this SlopeEnum class.\"\"\"\n\n    SLOPE3612 = \"-3.612\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.TargetNameEnum","title":"<code>TargetNameEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this TargetNameEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class TargetNameEnum(Enum):\n    \"\"\"TODO: Insert docstring for this TargetNameEnum class.\"\"\"\n\n    FBN1 = \"FBN1\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.TaskEnum","title":"<code>TaskEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this TaskEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class TaskEnum(Enum):\n    \"\"\"TODO: Insert docstring for this TaskEnum class.\"\"\"\n\n    UNKNOWN = \"UNKNOWN\"\n    STANDARD = \"STANDARD\"\n</code></pre>"},{"location":"record/#previsedx_quantstudio_file_utils.record.YinterceptEnum","title":"<code>YinterceptEnum</code>","text":"<p>               Bases: <code>Enum</code></p> <p>TODO: Insert docstring for this Y-interceptEnum class.</p> Source code in <code>previsedx_quantstudio_file_utils/record.py</code> <pre><code>class YinterceptEnum(Enum):\n    \"\"\"TODO: Insert docstring for this Y-interceptEnum class.\"\"\"\n\n    Y_INTERCEPT_24_508 = \"24.508\"\n</code></pre>"},{"location":"software_specification_template/","title":"Software specification template","text":"<p>Below is a simple software development specification template for designing and implementing a Python Command-Line Interface (CLI) program. Feel free to customize it based on your specific needs.</p>"},{"location":"software_specification_template/#software-development-specification","title":"Software Development Specification","text":""},{"location":"software_specification_template/#project-title","title":"Project Title","text":"<p>Objective: Briefly describe the purpose and goals of the project.</p>"},{"location":"software_specification_template/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Requirements</li> <li>Functional Specifications</li> <li>3.1 Use Cases</li> <li>3.2 Features</li> <li>Technical Specifications</li> <li>4.1 Programming Language</li> <li>4.2 Dependencies</li> <li>4.3 Directory Structure</li> <li>4.4 CLI Interface</li> <li>Development Environment</li> <li>Testing</li> <li>Documentation</li> <li>Version Control</li> <li>Deployment</li> <li>Maintenance</li> </ol>"},{"location":"software_specification_template/#1-introduction","title":"1. Introduction","text":"<p>Provide an overview of the project, including its purpose, target audience, and any relevant background information.</p>"},{"location":"software_specification_template/#2-requirements","title":"2. Requirements","text":"<p>List the functional and non-functional requirements for the project.</p>"},{"location":"software_specification_template/#functional-requirements","title":"Functional Requirements","text":"<p>Functional requirements describe the specific features and capabilities that a software system must have to meet the intended use and purpose. Here are examples of functional requirements for a Python CLI program:</p>"},{"location":"software_specification_template/#1-user-authentication","title":"1. User Authentication","text":"<ul> <li>Description: The CLI program should support user authentication to ensure that only authorized users can access certain functionalities.</li> <li>Acceptance Criteria: Users must provide valid credentials (username and password) to log in. Unauthorized access attempts should be denied.</li> </ul>"},{"location":"software_specification_template/#2-file-processing","title":"2. File Processing","text":"<ul> <li>Description: The CLI program should be able to read, write, and manipulate files on the local filesystem.</li> <li>Acceptance Criteria: Users should be able to specify input and output files as command-line arguments. The program must handle common file formats like text files and CSV files.</li> </ul>"},{"location":"software_specification_template/#3-data-validation","title":"3. Data Validation","text":"<ul> <li>Description: The CLI program should validate user input to ensure that it meets specified criteria.</li> <li>Acceptance Criteria: If the user provides invalid input (e.g., a non-numeric value for a numeric parameter), the program should display an appropriate error message and prompt the user to provide valid input.</li> </ul>"},{"location":"software_specification_template/#4-data-filtering","title":"4. Data Filtering","text":"<ul> <li>Description: Users should be able to filter data based on specified criteria.</li> <li>Acceptance Criteria: The program should allow users to use command-line options to filter data based on attributes such as date ranges, categories, or keywords.</li> </ul>"},{"location":"software_specification_template/#5-reporting","title":"5. Reporting","text":"<ul> <li>Description: The CLI program should generate reports based on processed data.</li> <li>Acceptance Criteria: Users should be able to request and generate reports using command-line options. The reports may be displayed on the console or saved to a specified file.</li> </ul>"},{"location":"software_specification_template/#6-batch-processing","title":"6. Batch Processing","text":"<ul> <li>Description: The CLI program should support batch processing of multiple files or data sets.</li> <li>Acceptance Criteria: Users should be able to provide a list of input files or directories as arguments, and the program should process them in sequence or in parallel.</li> </ul>"},{"location":"software_specification_template/#7-logging","title":"7. Logging","text":"<ul> <li>Description: The CLI program should log relevant information for troubleshooting and auditing purposes.</li> <li>Acceptance Criteria: The program should generate log files containing information about user actions, errors, and warnings.</li> </ul>"},{"location":"software_specification_template/#8-configuration","title":"8. Configuration","text":"<ul> <li>Description: Users should be able to configure the behavior of the CLI program through a configuration file.</li> <li>Acceptance Criteria: The program should read settings from a configuration file, allowing users to customize parameters such as default directories, logging levels, or output formats.</li> </ul>"},{"location":"software_specification_template/#9-help-and-documentation","title":"9. Help and Documentation","text":"<ul> <li>Description: The CLI program should provide help messages and documentation to guide users.</li> <li>Acceptance Criteria: Users should be able to access help messages by using a <code>--help</code> option or similar. The help messages should provide information about available commands, options, and usage examples.</li> </ul>"},{"location":"software_specification_template/#10-interactive-mode","title":"10. Interactive Mode","text":"<ul> <li>Description: The CLI program should support an interactive mode for users who prefer a more dynamic and iterative experience.</li> <li>Acceptance Criteria: Users should have the option to launch the program in interactive mode, where they can enter commands and receive immediate feedback.</li> </ul> <p>These examples cover a range of functionalities commonly found in CLI programs. Depending on the nature of your specific Python CLI program, you may have additional or different functional requirements.</p>"},{"location":"software_specification_template/#non-functional-requirements","title":"Non-functional Requirements","text":"<p>Non-functional requirements describe the qualities or characteristics that define how a software system should perform, rather than specific behaviors or features. Here are examples of non-functional requirements for a Python CLI program:</p>"},{"location":"software_specification_template/#1-performance","title":"1. Performance","text":"<ul> <li>Response Time: The CLI program should respond to user input within 2 seconds, ensuring a responsive user experience.</li> <li>Throughput: The program should handle a minimum of 100 file processing operations per minute.</li> </ul>"},{"location":"software_specification_template/#2-scalability","title":"2. Scalability","text":"<ul> <li>Scalability: The program should be able to handle an increasing number of concurrent users without a significant decrease in performance.</li> <li>Data Volume: It should support processing large files or datasets without a significant impact on response time.</li> </ul>"},{"location":"software_specification_template/#3-reliability","title":"3. Reliability","text":"<ul> <li>Availability: The CLI program should be available 99.9% of the time during standard operating hours.</li> <li>Fault Tolerance: The program should gracefully handle unexpected errors and recover without data loss.</li> </ul>"},{"location":"software_specification_template/#4-security","title":"4. Security","text":"<ul> <li>Authentication: User authentication should use secure mechanisms (e.g., hashed passwords) to protect user credentials.</li> <li>Authorization: Access to sensitive functionalities or data should be restricted based on user roles and permissions.</li> </ul>"},{"location":"software_specification_template/#5-usability","title":"5. Usability","text":"<ul> <li>User Interface Consistency: The CLI program should have a consistent and intuitive command-line interface.</li> <li>Documentation: The program should be well-documented, providing clear instructions on installation, configuration, and usage.</li> </ul>"},{"location":"software_specification_template/#6-maintainability","title":"6. Maintainability","text":"<ul> <li>Code Maintainability: The source code should follow coding standards and be well-commented to facilitate future maintenance.</li> <li>Modularity: The program should be designed with modular components to ease updates and modifications.</li> </ul>"},{"location":"software_specification_template/#7-compatibility","title":"7. Compatibility","text":"<ul> <li>Operating System Compatibility: The CLI program should be compatible with major operating systems, including Windows, macOS, and Linux.</li> <li>Python Version: The program should be compatible with Python 3.6 and above.</li> </ul>"},{"location":"software_specification_template/#8-performance-monitoring","title":"8. Performance Monitoring","text":"<ul> <li>Logging: The program should log performance metrics, errors, and warnings for monitoring and troubleshooting purposes.</li> <li>Alerting: Alerts should be triggered for critical errors or performance degradation.</li> </ul>"},{"location":"software_specification_template/#9-portability","title":"9. Portability","text":"<ul> <li>Dependency Management: The program should manage external dependencies effectively to ensure consistent behavior across different environments.</li> <li>Configuration Portability: Configuration files should be portable between different installations.</li> </ul>"},{"location":"software_specification_template/#10-compliance","title":"10. Compliance","text":"<ul> <li>Regulatory Compliance: The CLI program should comply with relevant data protection and privacy regulations.</li> <li>License Compliance: The program and its dependencies should adhere to open-source licenses.</li> </ul>"},{"location":"software_specification_template/#11-testability","title":"11. Testability","text":"<ul> <li>Unit Testing: The code should be designed to facilitate unit testing, with a target coverage of 80% or above.</li> <li>Integration Testing: The program should have a suite of integration tests covering key functionalities.</li> </ul> <p>These non-functional requirements focus on aspects such as performance, reliability, security, usability, maintainability, compatibility, and compliance. Adjust and expand these requirements based on the specific needs and constraints of your Python CLI program.</p>"},{"location":"software_specification_template/#3-functional-specifications","title":"3. Functional Specifications","text":""},{"location":"software_specification_template/#31-use-cases","title":"3.1 Use Cases","text":"<p>List and describe the main use cases of the CLI program.</p>"},{"location":"software_specification_template/#32-features","title":"3.2 Features","text":"<p>Detail the features that the CLI program will provide.</p>"},{"location":"software_specification_template/#4-technical-specifications","title":"4. Technical Specifications","text":""},{"location":"software_specification_template/#41-programming-language","title":"4.1 Programming Language","text":"<p>Specify the programming language (Python) and version to be used.</p>"},{"location":"software_specification_template/#42-dependencies","title":"4.2 Dependencies","text":"<p>List any third-party libraries or modules that the project will depend on.</p>"},{"location":"software_specification_template/#43-directory-structure","title":"4.3 Directory Structure","text":"<p>Outline the recommended directory structure for the project.</p>"},{"location":"software_specification_template/#44-cli-interface","title":"4.4 CLI Interface","text":"<p>Describe the command-line interface, including commands, options, and arguments.</p>"},{"location":"software_specification_template/#5-development-environment","title":"5. Development Environment","text":"<p>Specify the development tools and environment needed for the project.</p>"},{"location":"software_specification_template/#6-testing","title":"6. Testing","text":"<p>Detail the testing approach, including unit tests, integration tests, and any testing frameworks to be used.</p>"},{"location":"software_specification_template/#7-documentation","title":"7. Documentation","text":"<p>Outline the documentation plan, including inline code comments, README files, and any user or developer documentation.</p>"},{"location":"software_specification_template/#8-version-control","title":"8. Version Control","text":"<p>Specify the version control system (e.g., Git) and repository hosting service.</p>"},{"location":"software_specification_template/#9-deployment","title":"9. Deployment","text":"<p>Describe the deployment process and any specific considerations.</p>"},{"location":"software_specification_template/#10-maintenance","title":"10. Maintenance","text":"<p>Provide information on ongoing maintenance, bug tracking, and potential future updates.</p> <p>This template is a starting point, and you can customize it based on the specific needs and complexity of your CLI program. Ensure that each section is detailed enough to guide the development and implementation process effectively.</p>"},{"location":"system_caller/","title":"System Caller module","text":""},{"location":"system_caller/#previsedx_quantstudio_file_utils.system_caller.execute_cmd","title":"<code>execute_cmd(cmd, outdir=None, stdout_file=None, stderr_file=None, verbose=DEFAULT_VERBOSE)</code>","text":"<p>Execute a command via system call using the subprocess module.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>The executable to be invoked.</p> required <code>outdir</code> <code>str</code> <p>The output directory where STDOUT, STDERR and the shell script should be written to.</p> <code>None</code> <code>stdout_file</code> <code>str</code> <p>The file to which STDOUT will be captured in.</p> <code>None</code> <code>stderr_file</code> <code>str</code> <p>The file to which STDERR will be captured in.</p> <code>None</code> <p>Returns:     str: The path to the file where STDOUT was written to.</p> Source code in <code>previsedx_quantstudio_file_utils/system_caller.py</code> <pre><code>def execute_cmd(\n    cmd: str,\n    outdir: str = None,\n    stdout_file=None,\n    stderr_file=None,\n    verbose: bool = DEFAULT_VERBOSE,\n) -&gt; str:\n    \"\"\"Execute a command via system call using the subprocess module.\n\n    Args:\n        cmd (str): The executable to be invoked.\n        outdir (str): The output directory where STDOUT, STDERR and the shell script should be written to.\n        stdout_file (str): The file to which STDOUT will be captured in.\n        stderr_file (str): The file to which STDERR will be captured in.\n    Returns:\n        str: The path to the file where STDOUT was written to.\n    \"\"\"\n    if cmd is None:\n        raise Exception(\"cmd was not specified\")\n\n    cmd = cmd.strip()\n\n    logging.info(f\"Will attempt to execute '{cmd}'\")\n    if verbose:\n        print(f\"Will attempt to execute '{cmd}'\")\n\n    if outdir is None:\n        outdir = \"/tmp\"\n        logging.info(\n            f\"outdir was not defined and therefore was set to default '{outdir}'\"\n        )\n\n    if stdout_file is None:\n        stdout_file = _derive_std_file(cmd, outdir, \"stdout\")\n\n    if stderr_file is None:\n        stderr_file = _derive_std_file(cmd, outdir, \"stderr\")\n\n\n    if os.path.exists(stdout_file):\n        logging.info(\n            f\"STDOUT file '{stdout_file}' already exists so will delete it now\"\n        )\n        os.remove(stdout_file)\n\n    if os.path.exists(stderr_file):\n        logging.info(\n            f\"STDERR file '{stderr_file}' already exists so will delete it now\"\n        )\n        os.remove(stderr_file)\n\n    consolidated_cmd = cmd\n    p = subprocess.Popen(consolidated_cmd, shell=True)\n\n    (stdout, stderr) = p.communicate()\n\n    pid = p.pid\n\n    logging.info(f\"The child process ID is '{pid}'\")\n    if verbose:\n        print(f\"The child process ID is '{pid}'\")\n\n    p_status = p.wait()\n\n    p_returncode = p.returncode\n\n    if p_returncode is not None:\n        logging.info(f\"The return code was '{p_returncode}'\")\n    else:\n        logging.info(\"There was no return code\")\n\n    if p_status == 0:\n        logging.info(f\"Execution of cmd '{cmd}' has completed\")\n    else:\n        raise Exception(f\"Received status '{p_status}'\")\n\n    if stdout is not None:\n        logging.info(\"stdout is: \" + stdout_file)\n\n    if stderr is not None:\n        logging.info(\"stderr is: \" + stderr_file)\n\n    return stdout_file\n</code></pre>"},{"location":"xls/parser/","title":"Parser module","text":"<p>Class for parsing Thermo Fisher Scientific QuantStudio qPCR Result Excel files.</p>"},{"location":"xls/parser/#previsedx_quantstudio_file_utils.xls.parser.Parser","title":"<code>Parser</code>","text":"<p>               Bases: <code>Parser</code></p> <p>Class for parsing Thermo Fisher Scientific QuantStudio qPCR Result Excel files.</p> Source code in <code>previsedx_quantstudio_file_utils/xls/parser.py</code> <pre><code>class Parser(BaseParser):\n    \"\"\"Class for parsing Thermo Fisher Scientific QuantStudio qPCR Result Excel\n    files.\"\"\"\n\n    def get_records(self, infile: str) -&gt; List[Record]:\n        \"\"\"Parser the tab-delimited file and retrieve a list of records.\n\n        Args:\n            infile (str): The Excel .xls results to be parsed.\n        Returns:\n            List(Record): The parsed records.\n        \"\"\"\n        if self.is_parsed:\n            return self.rec_list\n\n        if not infile.endswith(\".xls\"):\n            raise Exception(\n                f\"Invalid file extension for file '{infile}'. Expected '.xlsx' extension.\"\n            )\n\n        logging.info(f\"Will attempt to parse gene file '{infile}'\")\n\n        check_infile_status(infile)\n\n        record_ctr = 0\n\n        sheet_name = self.config.get(\"gene_file\", None).get(\"sheet_name\", None)\n        if sheet_name is None or sheet_name == \"\":\n            sheet_name = constants.DEFAULT_RESULTS_SHEET_NAME\n        logging.info(f\"sheet_name: {sheet_name}\")\n\n        header_row_number = self.config.get(\"gene_file\", None).get(\n            \"header_row_number\", None\n        )\n        if header_row_number is None or header_row_number == \"\":\n            header_row_number = constants.DEFAULT_HEADER_ROW_NUMBER\n        logging.info(f\"header_row_number: {header_row_number}\")\n\n        # Read the Excel file\n        df = pd.read_excel(\n            infile,\n            sheet_name=sheet_name,\n            header=header_row_number,\n            engine=\"xlrd\",  # Need to install the following package to read Excel files with .xls extension: pip install xlrd==2.0.1\n        )\n\n        # Check if the expected columns are present\n        expected_columns = [\n            \"Well\",\n            \"Well Position\",\n            \"Sample Name\",\n            \"Target Name\",\n            \"Quantity\",\n            \"Quantity Mean\",\n            \"Quantity SD\",\n            \"Y-Intercept\",\n            \"R(superscript 2)\",\n            \"Slope\",\n            \"Efficiency\",\n            \"Amp Status\",\n        ]\n\n        missing_columns = [col for col in expected_columns if col not in df.columns]\n\n        if missing_columns:\n            raise Exception(f\"Missing columns in the DataFrame: {missing_columns} while processing file '{os.path.basename(infile)}'\")\n\n        # Remove all records where all cells are empty\n        df = df.dropna(how=\"all\")\n\n        # Extract the relevant rows and columns\n        df = df.loc[0:, expected_columns]\n\n        # Replace NaN values with an empty string\n        df.fillna(0.0, inplace=True)\n\n        record_number = 0\n\n        for index, row in df.iterrows():\n            record_number += 1\n\n            row_dict = row.to_dict()\n\n            try:\n                record = Record(**row_dict)\n\n                self.rec_list.append(record)\n\n                self.rec_ctr += 1\n\n            except ValidationError as exc:\n                print(repr(exc.errors()[0][\"type\"]))\n                missing_fields = [\n                    error[\"loc\"][0]\n                    for error in exc.errors()\n                    if error[\"msg\"] == \"field required\"\n                ]\n                print(\"Missing fields:\", missing_fields)\n                print(exc.errors())\n                sys.exit(1)\n                # &gt; 'missing'\n\n            except Exception as e:\n                if (row[\"Quantity Mean\"] is None or row[\"Quantity Mean\"] == \"\") and (\n                    row[\"Sample Name\"] in (\"STD 1\", \"STD 2\", \"STD 3\", \"STD 4\", \"STD 5\")\n                    or row[\"Sample Name\"].startswith(\"NTC - REP\")\n                    or row[\"Sample Name\"] == \"EXTRACT NEG\"\n                    or row[\"Sample Name\"] == \"NTC\"\n                ):\n                    logging.warning(\n                        f\"Encountered a record with no quantity mean value for sample name '{row['Sample Name']}'\"\n                    )\n                elif (row[\"Quantity Mean\"] is None or row[\"Quantity Mean\"] == \"\") and (\n                    row[\"Sample Name\"] is None or row[\"Sample Name\"] == \"\"\n                ):\n                    logging.error(\n                        \"Encountered a record with no quantity mean value and no sample name\"\n                    )\n                else:\n                    logging.error(\n                        f\"Encountered some exception with record number '{record_number}': {e}\"\n                    )\n                    raise e\n                    self.error_ctr += 1\n                    self.error_list.append(e)\n\n                sys.exit(1)\n            record_ctr += 1\n\n        logging.info(f\"Processed '{record_ctr}' records in data file '{infile}'\")\n\n        if self.error_ctr &gt; 0:\n            self._write_validation_report(infile)\n            sys.exit(1)\n\n        self.is_parsed = True\n        return self.rec_list\n</code></pre>"},{"location":"xls/parser/#previsedx_quantstudio_file_utils.xls.parser.Parser.get_records","title":"<code>get_records(infile)</code>","text":"<p>Parser the tab-delimited file and retrieve a list of records.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The Excel .xls results to be parsed.</p> required <p>Returns:     List(Record): The parsed records.</p> Source code in <code>previsedx_quantstudio_file_utils/xls/parser.py</code> <pre><code>def get_records(self, infile: str) -&gt; List[Record]:\n    \"\"\"Parser the tab-delimited file and retrieve a list of records.\n\n    Args:\n        infile (str): The Excel .xls results to be parsed.\n    Returns:\n        List(Record): The parsed records.\n    \"\"\"\n    if self.is_parsed:\n        return self.rec_list\n\n    if not infile.endswith(\".xls\"):\n        raise Exception(\n            f\"Invalid file extension for file '{infile}'. Expected '.xlsx' extension.\"\n        )\n\n    logging.info(f\"Will attempt to parse gene file '{infile}'\")\n\n    check_infile_status(infile)\n\n    record_ctr = 0\n\n    sheet_name = self.config.get(\"gene_file\", None).get(\"sheet_name\", None)\n    if sheet_name is None or sheet_name == \"\":\n        sheet_name = constants.DEFAULT_RESULTS_SHEET_NAME\n    logging.info(f\"sheet_name: {sheet_name}\")\n\n    header_row_number = self.config.get(\"gene_file\", None).get(\n        \"header_row_number\", None\n    )\n    if header_row_number is None or header_row_number == \"\":\n        header_row_number = constants.DEFAULT_HEADER_ROW_NUMBER\n    logging.info(f\"header_row_number: {header_row_number}\")\n\n    # Read the Excel file\n    df = pd.read_excel(\n        infile,\n        sheet_name=sheet_name,\n        header=header_row_number,\n        engine=\"xlrd\",  # Need to install the following package to read Excel files with .xls extension: pip install xlrd==2.0.1\n    )\n\n    # Check if the expected columns are present\n    expected_columns = [\n        \"Well\",\n        \"Well Position\",\n        \"Sample Name\",\n        \"Target Name\",\n        \"Quantity\",\n        \"Quantity Mean\",\n        \"Quantity SD\",\n        \"Y-Intercept\",\n        \"R(superscript 2)\",\n        \"Slope\",\n        \"Efficiency\",\n        \"Amp Status\",\n    ]\n\n    missing_columns = [col for col in expected_columns if col not in df.columns]\n\n    if missing_columns:\n        raise Exception(f\"Missing columns in the DataFrame: {missing_columns} while processing file '{os.path.basename(infile)}'\")\n\n    # Remove all records where all cells are empty\n    df = df.dropna(how=\"all\")\n\n    # Extract the relevant rows and columns\n    df = df.loc[0:, expected_columns]\n\n    # Replace NaN values with an empty string\n    df.fillna(0.0, inplace=True)\n\n    record_number = 0\n\n    for index, row in df.iterrows():\n        record_number += 1\n\n        row_dict = row.to_dict()\n\n        try:\n            record = Record(**row_dict)\n\n            self.rec_list.append(record)\n\n            self.rec_ctr += 1\n\n        except ValidationError as exc:\n            print(repr(exc.errors()[0][\"type\"]))\n            missing_fields = [\n                error[\"loc\"][0]\n                for error in exc.errors()\n                if error[\"msg\"] == \"field required\"\n            ]\n            print(\"Missing fields:\", missing_fields)\n            print(exc.errors())\n            sys.exit(1)\n            # &gt; 'missing'\n\n        except Exception as e:\n            if (row[\"Quantity Mean\"] is None or row[\"Quantity Mean\"] == \"\") and (\n                row[\"Sample Name\"] in (\"STD 1\", \"STD 2\", \"STD 3\", \"STD 4\", \"STD 5\")\n                or row[\"Sample Name\"].startswith(\"NTC - REP\")\n                or row[\"Sample Name\"] == \"EXTRACT NEG\"\n                or row[\"Sample Name\"] == \"NTC\"\n            ):\n                logging.warning(\n                    f\"Encountered a record with no quantity mean value for sample name '{row['Sample Name']}'\"\n                )\n            elif (row[\"Quantity Mean\"] is None or row[\"Quantity Mean\"] == \"\") and (\n                row[\"Sample Name\"] is None or row[\"Sample Name\"] == \"\"\n            ):\n                logging.error(\n                    \"Encountered a record with no quantity mean value and no sample name\"\n                )\n            else:\n                logging.error(\n                    f\"Encountered some exception with record number '{record_number}': {e}\"\n                )\n                raise e\n                self.error_ctr += 1\n                self.error_list.append(e)\n\n            sys.exit(1)\n        record_ctr += 1\n\n    logging.info(f\"Processed '{record_ctr}' records in data file '{infile}'\")\n\n    if self.error_ctr &gt; 0:\n        self._write_validation_report(infile)\n        sys.exit(1)\n\n    self.is_parsed = True\n    return self.rec_list\n</code></pre>"}]}